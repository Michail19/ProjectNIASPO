name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Install Android SDK
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          mkdir -p $HOME/android-sdk/cmdline-tools
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $HOME/android-sdk/cmdline-tools
          mv $HOME/android-sdk/cmdline-tools/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/emulator:$PATH
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-35" "build-tools;33.0.2" "system-images;android-35;google_apis;x86_64" "emulator"

      - name: Build and run tests
        run: ./gradlew test

      - name: Create Android Virtual Device (AVD)
        run: |
          echo "no" | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager create avd -n test_device -k "system-images;android-35;google_apis;x86_64" -d pixel

      - name: Start Emulator and Run Tests
        run: |
          export PATH=$PATH:/usr/local/lib/android/sdk/platform-tools
          export ADB_SERVER_PORT=5037
          adb start-server
          $ANDROID_SDK_ROOT/emulator/emulator -avd test_device -no-snapshot -no-audio -no-window -partition-size 2048 -gpu swiftshader_indirect -accel off &
          timeout 120 adb wait-for-device || { echo "Emulator did not start in time"; exit 1; }
          adb install -r app/build/outputs/apk/debug/app-debug.apk
          adb shell monkey -p com.me.projectniaspo -c android.intent.category.LAUNCHER 1 || { echo "App failed to launch"; exit 1; }
      
    - name: Stop Emulator
        run: |
          adb -s emulator-5554 emu kill
          adb kill-server



  integration:
    runs-on: ubuntu-latest
    needs: test

    steps:
      # Шаг 1: Клонировать репозиторий
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установить Docker и Docker Compose
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Шаг 3: Собрать и запустить контейнеры
      - name: Build and start containers
        run: |
          docker-compose -f ./docker/docker-compose.yml up --build -d

      # Шаг 4: Проверить состояние контейнеров
      - name: Check services health
        run: |
          docker-compose -f ./docker/docker-compose.yml ps || true

      # Шаг 5: Очистить после тестирования
      - name: Clean up
        if: always()
        run: |
          docker-compose -f ./docker/docker-compose.yml down


  deployment:
    runs-on: ubuntu-latest
    needs: integration

    steps:
      # Шаг 1: Клонировать репозиторий
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Настроить Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Шаг 3: Установить Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Шаг 4: Войти в Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Шаг 5: Собрать и загрузить образы в Docker Hub
      - name: Build and push Docker images
        run: |
          docker-compose -f ./docker/docker-compose.yml build
          docker-compose -f ./docker/docker-compose.yml push
