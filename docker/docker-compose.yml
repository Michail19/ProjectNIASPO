version: '3.8'

services:
  xvfb:
    build:
      context: ..
      dockerfile: docker/Dockerfile-xvfb
    environment:
      - DISPLAY=:0
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
    networks:
      - my-network

  novnc:
    build:
      context: ..
      dockerfile: docker/Dockerfile-novnc
    ports:
      - "5900:5900"   # Порт для VNC
      - "6080:6080"   # Порт для noVNC
    environment:
      - DISPLAY=:0
    privileged: true
    cap_add:
      - SYS_ADMIN  # Добавляем необходимые права для работы с виртуализацией
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
    depends_on:
      xvfb:
        condition: service_healthy
    command: /app/start-server.sh
    networks:
      - my-network

  emulator:
    shm_size: '1g'
    build:
      context: ..
      dockerfile: docker/Dockerfile-emulator
    ports:
      - "5554:5554"
      - "5555:5555"
      - "5037:5037"  # ADB-сервер
    environment:
      - DISPLAY=:0
      - ADB_SERVER_PORT=5038
    devices:
      - "/dev/kvm:/dev/kvm"   # Монтирование устройства KVM
    privileged: true
    cap_add:
      - SYS_ADMIN   # Даем дополнительные права
    volumes:
      - ${PWD}/..:/app
      - /tmp/.X11-unix:/tmp/.X11-unix
    depends_on:
      xvfb:
        condition: service_healthy
    command: ./run-emulator.sh
    networks:
      - my-network
    deploy:
      resources:
        limits:
          memory: 4g        # Максимальный объем памяти для контейнера
          cpus: "2.0"       # Ограничение на использование 2 CPU-ядра
        reservations:
          memory: 2g        # Резервируемый объем памяти для контейнера
          cpus: "1.0"       # Резервируемое количество процессоров для контейнера

  gradle:
    build:
      context: ..
      dockerfile: docker/Dockerfile-common
    working_dir: /app
    command: ["./gradlew", "assembleDebug"]
    networks:
      - my-network

  artifact-repo:
    build:
      context: ..
      dockerfile: docker/Dockerfile-artifact-repo
    volumes:
      - ${PWD}/docker/artifacts:/artifacts
    command: sleep infinity
    networks:
      - my-network

  linter:
    build:
      context: ..
      dockerfile: docker/Dockerfile-common
    working_dir: /app
    command: ["./gradlew", "lint"]
    networks:
      - my-network

networks:
  my-network:
    driver: bridge

